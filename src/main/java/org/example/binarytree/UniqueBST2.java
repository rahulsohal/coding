package org.example.binarytree;import org.example.util.TreeNode;import java.util.ArrayList;import java.util.List;public class UniqueBST2 {    public static void main(String[] args) {        UniqueBST2 bst = new UniqueBST2();        List<TreeNode> nodes = bst.uniqueBST(6);        bst.numTrees(5);        System.out.println(nodes);    }    private List<TreeNode> uniqueBST(int n) {        if(n == 0) return new ArrayList<>();        return generate(1, n);    }    private List<TreeNode> generate(int start, int end) {        List<TreeNode> res = new ArrayList<>();        //terminal conditional        if(start > end) {            res.add(null);            return res;        }        for(int i = start; i<= end; i++) {            List<TreeNode> leftTrees = generate(start, i-1);            List<TreeNode> rightTrees = generate(i+1, end);            for(TreeNode left: leftTrees) {                for(TreeNode right: rightTrees) {                    TreeNode root = new TreeNode(i);                    root.left = left;                    root.right = right;                    res.add(root);                }            }        }        return res;    }    public int numTrees(int n) {        double num = Math.pow(4, n);        double den = Math.pow(n, 1.5)* Math.sqrt(3.14);        double res = num/den;        System.out.println(res);        return 0;    }}