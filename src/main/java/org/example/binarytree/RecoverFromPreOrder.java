package org.example.binarytree;import org.example.util.TreeNode;import java.util.LinkedList;import java.util.Queue;public class RecoverFromPreOrder {    int index = 0;    String[] arr;    public static void main(String[] args) {        String traversal = "1-2--3--4-5--6--7";        RecoverFromPreOrder pr = new RecoverFromPreOrder();        TreeNode node = pr.recoverFromPreOrder(traversal);        System.out.println(node);    }    public TreeNode recoverFromPreOrder(String traversal) {        String str = traversal.replaceAll("--", "-X-");        str = str.replaceAll("\s+", "");        arr = str.split("-");        for(String s: arr) {            System.out.print("_" + s);        }//        System.out.println(arr.length);//        System.out.println(str);        return dfs();    }    private TreeNode dfs() {        if(index == arr.length)            return null;        System.out.println("i "+index);        if(arr[index].equals("X")) {            index++;            return null;        }        TreeNode node = new TreeNode(Integer.parseInt(arr[index++]));        node.left = dfs();        node.right = dfs();        return node;    }    private TreeNode buiildTree(String[] arr) {        if(arr == null || arr.length == 0) return null;        TreeNode root = new TreeNode(Integer.parseInt(arr[index]));        Queue<TreeNode> q = new LinkedList<>();        q.add(root);        int i = 1;        while(!q.isEmpty() && i < arr.length) {            TreeNode node = q.poll();            if(i< arr.length && arr[i] != null) {                node.left = new TreeNode(Integer.parseInt(arr[i]));                q.offer(node.left);            }            if(i< arr.length && arr[i] != null) {                node.right = new TreeNode(Integer.parseInt(arr[i]));                q.offer(node.right);            }            i++;        }        return root;    }}