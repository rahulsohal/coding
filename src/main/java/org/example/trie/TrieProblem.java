package org.example.trie;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class TrieProblem {    private final TrieNode trieNode;    public TrieProblem() {        this.trieNode = new TrieNode();    }    public static void main(String[] args) {        TrieProblem trie = new TrieProblem();        String[] words = {"ten", "tent", "bat", "cat","car","cart","cartwheel","caring","cab","cabbage"};        trie.buildTrie(words);    }    public void buildTrie(String[] words) {        for(String word: words) {            insert(word);        }        List<String> sug = suggestion("ca");        System.out.println(sug.toString());    }    private void insert(String word) {        TrieNode curr = trieNode;        for(char c: word.toCharArray()) {            curr.getChild().putIfAbsent(c, new TrieNode());            curr = curr.getChild().get(c);        }        curr.setEndOfWord(true);    }    private List<String> suggestion(String prefix) {        TrieNode curr = trieNode;        List<String> result = new ArrayList<>();        StringBuilder pre= new StringBuilder();        for(char c: prefix.toCharArray()) {            curr = curr.getChild().get(c);            if (curr == null) {                return result;            }            pre.append(c);        }        traverse(curr, pre, result);        return result;    }    private void traverse(TrieNode curr, StringBuilder sb, List<String> result) {        if(curr.isEndOfWord()) {            result.add(sb.toString());        }        curr.getChild().forEach((c, triesNode) -> {            sb.append(c);            traverse(triesNode, sb, result);            sb.deleteCharAt(sb.length()-1);        });    }} class TrieNode {    boolean endOfWord;    Map<Character, TrieNode> child;    public TrieNode() {        this.child = new HashMap<>();        this.endOfWord = false;    }     public boolean isEndOfWord() {         return endOfWord;     }     public void setEndOfWord(boolean endOfWord) {         this.endOfWord = endOfWord;     }     public Map<Character, TrieNode> getChild() {         return child;     } }