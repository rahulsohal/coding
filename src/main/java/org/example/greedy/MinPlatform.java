package org.example.greedy;import org.example.Pair;import java.util.*;public class MinPlatform {    public static void main(String[] args) {        MinPlatform platform = new MinPlatform();        System.out.println(STR."No of platforms: \{platform.calculate()}");        int[][] result = platform.mergeInteval();        System.out.println(result.length);        for(int[] r: result) {            System.out.print(STR."[\{r[0]}, \{r[1]}], ");        }        System.out.println(STR."\n==========\nNo of meeting rooms: \{platform.meetings()}");        platform.roomAllocation();        platform.balloonBurst();    }    int calculate() {        int[] arrival = {900, 940, 950, 1100, 1500, 1800};        int[] departure = {910, 1200, 1120, 1730, 1900, 2000};        Arrays.sort(arrival);        Arrays.sort(departure);        int maxPlatform =0;        int count=0;        int i=0,j=0;        while(i< arrival.length && j< departure.length ) {            if(arrival[i] <= departure[j]) {                count++;                i++;            } else {                count--;                j++;            }            maxPlatform = Math.max(maxPlatform, count);        }    return maxPlatform;    }    public int[][] mergeInteval() {        int[][] intervals = {                {1, 3},                {2, 6},                {8, 10},                {15, 18}        };        List<int[]> result = new ArrayList<>();        if(intervals == null || intervals.length == 0)            return new int[0][];        Arrays.sort(intervals, Comparator.comparingInt(a -> a[0]));        int[] current = intervals[0];        for(int i=1; i< intervals.length;i++) {            int[] next = intervals[i];            if(next[0] <= current[1]) {                current[1] = Math.max(current[1], next[1]);            } else {                result.add(current);                current = next;            }        }        result.add(current);        return result.toArray(new int[0][]);    }    public int meetings() {        int[][] intervals = {                {0, 30},                {5, 10},                {15, 20}        };        int[] start = new int[intervals.length];        int[] end = new int[intervals.length];        int k=0;        for(int[] i: intervals) {            start[k] = i[0];            end[k] = i[1];            k++;        }        Arrays.sort(start);        Arrays.sort(end);        int strptr = 0, endptr=0;        int rooms=0, maxRooms=0;        while(strptr < start.length && endptr < end.length) {            if(start[strptr] <= end[endptr]) {                rooms++;                strptr++;            } else {                rooms--;                endptr++;            }            maxRooms = Math.max(maxRooms, rooms);        }    return maxRooms;    }    public void roomAllocation() {        int[][] intervals = {                {0, 30},                {5, 10},                {15, 20}        };        Arrays.sort(intervals, Comparator.comparingInt(a -> a[0]));        PriorityQueue<Pair> minQueue = new PriorityQueue<Pair>                (Comparator.comparingInt(a -> a.start));        Map<int[], Integer> result = new HashMap<>();        int roomNum = 1;        minQueue.offer(new Pair(intervals[0][1], roomNum));        result.put(intervals[0], roomNum);        for(int i=1; i< intervals.length;i++) {            int meetingStart = intervals[i][0];            int meetingEnd = intervals[i][1];            if(!minQueue.isEmpty() && meetingStart >=  minQueue.peek().start) {                Pair earlist = minQueue.poll();                minQueue.offer(new Pair(meetingEnd, earlist.end)); //Same room no                result.put(intervals[i], earlist.end);            } else {                roomNum++;                minQueue.offer(new Pair(meetingEnd, roomNum));                result.put(intervals[i], roomNum);            }        }        for(Map.Entry<int[], Integer> entry: result.entrySet()) {            int[] interval = entry.getKey();            System.out.println(STR."\{Arrays.toString(interval)} : \{entry.getValue()}");        }    }    //Balloon Burst    void balloonBurst() {        int[][] balloons = {{10,16}, {2,8}, {1,6}, {7,12}};        Arrays.sort(balloons, Comparator.comparingInt(a -> a[1]));        int prevEnd = balloons[0][1];        int arrowCount =1;        List<Integer> pos = new ArrayList<>();        pos.add(prevEnd);        for(int i=1;i<balloons.length;i++) {            if(balloons[i][0] > prevEnd) {                arrowCount++;                prevEnd = balloons[i][1];                pos.add(prevEnd);            }        }        System.out.println(STR."ArrowCount: \{arrowCount}");        System.out.println(STR."\{Arrays.toString(pos.toArray())}");    }    public int[][] insertInterval() {        int[][] intervals = {{1,3},{2,5},{5,7},{6,9}};        Arrays.sort(intervals, Comparator.comparingInt(a -> a[0]));        List<int[]> result = new ArrayList<>();        int[] current = intervals[0];        for(int i=1;i< intervals.length;i++) {            int[] next = intervals[i];            if(current[1] >= next[0]) {                current[1] = Math.max(current[1], next[1]);            } else{                result.add(current);                current = next;            }        }        result.add(current);        return result.toArray(new int[result.size()][]);    }}