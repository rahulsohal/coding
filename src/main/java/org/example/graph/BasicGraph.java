package org.example.graph;import java.util.*;public class BasicGraph {    public static Set<Integer> visited = new HashSet<>();    public static int component=0;    public static Stack<Integer> stack = new Stack<>();    public static Map<Integer, List<Integer>> adjList = new HashMap<>();    public static void main(String[] args) {        BasicGraph graph = new BasicGraph();//        connectedComp();//        System.out.println(component);        System.out.println("CS "+courseSchedule());    }    public static void connectedComp() {        int n =5;        int[][] edge = {{0,1}, {1,2}, {3,4}};        List<List<Integer>> adjList = new ArrayList<>();        for(int i=0;i<n;i++) {            adjList.add(new ArrayList<>());        }        for(int[] e: edge) {            adjList.get(e[0]).add(e[1]);            adjList.get(e[1]).add(e[0]); // because its indirect        }        for(int i=0;i<n;i++) {            if(!visited.contains(i)) {                dfs(i, adjList);                component++;            }        }    }    private static void dfs(int node, List<List<Integer>> adjList) {        stack.push(node);        visited.add(node);        while(!stack.isEmpty()) {            int curr = stack.pop();            for(int ne: adjList.get(curr)) {                if (!visited.contains(ne) && ne >= 0) {                    stack.push(ne);                    visited.add(ne);                }            }        }    }    private static void clear() {        visited.clear();        stack.clear();    }    public static boolean courseSchedule() {        int numCourses = 4;        int[][] prereq = {{1,0}, {2,1}, {3,2}};        clear();        for(int i=0;i<numCourses;i++) {            if(!adjList.containsKey(i)) {                adjList.put(i, new ArrayList<>());            }        }        for(int[] a: prereq) {            adjList.get(a[1]).add(a[0]);        }        System.out.println(adjList);        boolean result = false;        for(Map.Entry<Integer, List<Integer>> entry: adjList.entrySet()) {            result = courseDFS(entry.getKey());            if(!result) break;        }        return result;    }    public static boolean courseDFS(int curr) {        System.out.println(STR."Curr: \{curr}");        if(visited.contains(curr)) {            System.out.println(STR."From visted Curr : \{curr}");            return false;        }        if(adjList.get(curr).isEmpty()) {            System.out.println(STR."From empty list Curr : \{curr}");            return true;        }        visited.add(curr);        List<Integer> list = adjList.get(curr);        for(Integer node: list) {            if(!courseDFS(node)) return false;        }        System.out.println(STR."Visited: \{visited}");        System.out.println("Here to remove and reset");        visited.remove(curr);        adjList.put(curr, new ArrayList<>());        return true;    }}